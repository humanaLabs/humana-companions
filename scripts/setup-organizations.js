#!/usr/bin/env node

// Carregar vari√°veis de ambiente do .env.local
require('dotenv').config({ path: '.env.local' });

const { drizzle } = require('drizzle-orm/postgres-js');
const postgres = require('postgres');

// Conex√£o com o banco (usando as mesmas configura√ß√µes do projeto)
const connectionString = process.env.POSTGRES_URL || process.env.DATABASE_URL;

if (!connectionString) {
  console.error('‚ùå DATABASE_URL ou POSTGRES_URL n√£o encontrada no .env');
  process.exit(1);
}

const sql = postgres(connectionString);
const db = drizzle(sql);

async function setupOrganizations() {
  console.log('üöÄ Configurando organiza√ß√µes padr√£o no banco...\n');

  try {
    // 1. Criar usu√°rio sistema
    console.log('üë§ Criando usu√°rio sistema...');
    await sql`
      INSERT INTO "User" (
        "id",
        "email",
        "password",
        "isMasterAdmin",
        "plan",
        "messagesSent"
      ) VALUES (
        '00000000-0000-0000-0000-000000000001',
        'system@humana.ai',
        '$2b$10$dummy.hash.for.system.user.that.cannot.login',
        true,
        'pro',
        0
      ) ON CONFLICT ("id") DO NOTHING;
    `;
    console.log('‚úÖ Usu√°rio sistema criado/verificado\n');

    // 2. Criar organiza√ß√£o guest
    console.log('üë• Criando organiza√ß√£o GUEST...');
    await sql`
      INSERT INTO "Organization" (
        "id",
        "name", 
        "description",
        "tenantConfig",
        "values",
        "teams", 
        "positions",
        "orgUsers",
        "userId",
        "createdAt",
        "updatedAt"
      ) VALUES (
        '00000000-0000-0000-0000-000000000002',
        'Guest Organization',
        'Organiza√ß√£o padr√£o para usu√°rios guest e tempor√°rios',
        '{"timezone": "America/Sao_Paulo", "language": "pt-BR", "llm_provider": "azure-openai", "default_model": "gpt-4o"}',
        '[]',
        '[]',
        '[]', 
        '[]',
        '00000000-0000-0000-0000-000000000001',
        NOW(),
        NOW()
      ) ON CONFLICT ("id") DO NOTHING;
    `;
    console.log('‚úÖ Organiza√ß√£o GUEST criada/verificada');

    // 3. Criar organiza√ß√£o padr√£o
    console.log('üèõÔ∏è Criando organiza√ß√£o PADR√ÉO...');
    await sql`
      INSERT INTO "Organization" (
        "id",
        "name", 
        "description",
        "tenantConfig",
        "values",
        "teams", 
        "positions",
        "orgUsers",
        "userId",
        "createdAt",
        "updatedAt"
      ) VALUES (
        '00000000-0000-0000-0000-000000000003',
        'Organiza√ß√£o Padr√£o',
        'Organiza√ß√£o padr√£o para usu√°rios cadastrados que n√£o possuem organiza√ß√£o espec√≠fica',
        '{"timezone": "America/Sao_Paulo", "language": "pt-BR", "llm_provider": "azure-openai", "default_model": "gpt-4o"}',
        '[{"name": "Colabora√ß√£o", "description": "Trabalhar em equipe de forma eficiente"}, {"name": "Inova√ß√£o", "description": "Buscar sempre novas solu√ß√µes"}, {"name": "Qualidade", "description": "Entregar o melhor resultado poss√≠vel"}]',
        '[{"id": "general", "name": "Geral", "description": "Equipe geral da organiza√ß√£o"}]',
        '[{"id": "member", "name": "Membro", "description": "Membro da organiza√ß√£o"}, {"id": "admin", "name": "Administrador", "description": "Administrador da organiza√ß√£o"}]', 
        '[]',
        '00000000-0000-0000-0000-000000000001',
        NOW(),
        NOW()
      ) ON CONFLICT ("id") DO NOTHING;
    `;
    console.log('‚úÖ Organiza√ß√£o PADR√ÉO criada/verificada\n');

    // 4. Verificar o que foi criado
    console.log('üîç Verificando configura√ß√£o...');
    const [guestOrg] =
      await sql`SELECT "id", "name" FROM "Organization" WHERE "id" = '00000000-0000-0000-0000-000000000002'`;
    const [defaultOrg] =
      await sql`SELECT "id", "name" FROM "Organization" WHERE "id" = '00000000-0000-0000-0000-000000000003'`;
    const [systemUser] =
      await sql`SELECT "id", "email" FROM "User" WHERE "id" = '00000000-0000-0000-0000-000000000001'`;

    console.log('üìä RELAT√ìRIO FINAL:');
    console.log('==========================================');
    console.log(`üë• Organiza√ß√£o Guest: ${guestOrg ? '‚úÖ ATIVA' : '‚ùå FALHOU'}`);
    console.log(
      `üèõÔ∏è Organiza√ß√£o Padr√£o: ${defaultOrg ? '‚úÖ ATIVA' : '‚ùå FALHOU'}`,
    );
    console.log(`üë§ Usu√°rio Sistema: ${systemUser ? '‚úÖ ATIVO' : '‚ùå FALHOU'}`);
    console.log('==========================================\n');

    console.log('üìã INSTRU√á√ïES DE USO:');
    console.log(
      '- Usu√°rios GUEST sempre usam: 00000000-0000-0000-0000-000000000002',
    );
    console.log(
      '- Usu√°rios CADASTRADOS sem org espec√≠fica usam: 00000000-0000-0000-0000-000000000003',
    );
    console.log(
      '- Use estas IDs no c√≥digo para atribuir organiza√ß√µes automaticamente',
    );
    console.log('\nüéâ Configura√ß√£o conclu√≠da com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao configurar organiza√ß√µes:', error.message);
    console.error(error);
    process.exit(1);
  } finally {
    await sql.end();
  }
}

// Executar o script
setupOrganizations();
