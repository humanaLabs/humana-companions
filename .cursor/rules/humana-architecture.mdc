---
description: 
globs: 
alwaysApply: false
---
# Humana Companions - Arquitetura e Padr√µes

## üìã Vis√£o Geral
Esta regra define os padr√µes arquiteturais espec√≠ficos do projeto Humana Companions, baseada na documenta√ß√£o em `docs/arquitetura_geral/`.

## üèóÔ∏è Estrutura da Aplica√ß√£o

### Organiza√ß√£o de Diret√≥rios
```
üìÅ lib/ai/                    # IA e modelos
‚îú‚îÄ‚îÄ models.ts                 # Configura√ß√£o de modelos
‚îú‚îÄ‚îÄ providers.ts              # Providers (OpenAI, Anthropic)
‚îú‚îÄ‚îÄ dify-agents.ts           # Integra√ß√£o Dify
‚îú‚îÄ‚îÄ prompts.ts               # Templates de prompts
‚îî‚îÄ‚îÄ tools/                   # Function calling tools

üìÅ artifacts/                 # Sistema de artifacts
‚îú‚îÄ‚îÄ actions.ts               # Server actions
‚îú‚îÄ‚îÄ text/client.tsx          # Editor de texto
‚îú‚îÄ‚îÄ code/client.tsx          # Editor de c√≥digo
‚îú‚îÄ‚îÄ image/client.tsx         # Editor de imagem
‚îî‚îÄ‚îÄ sheet/client.tsx         # Editor de planilha

üìÅ components/               # Componentes UI
‚îú‚îÄ‚îÄ ui/                      # shadcn/ui components
‚îú‚îÄ‚îÄ chat.tsx                 # Interface principal de chat
‚îú‚îÄ‚îÄ artifact.tsx            # Container de artifacts
‚îî‚îÄ‚îÄ dify-agent-selector.tsx  # Seletor de agentes Dify
```

## ü§ñ Padr√µes de IA

### Configura√ß√£o de Modelos
```typescript
// SEMPRE use esta estrutura para novos modelos
export interface ModelConfig {
  id: string;
  provider: 'openai' | 'anthropic';
  name: string;
  description: string;
  maxTokens: number;
  supportsTools: boolean;
  supportsVision: boolean;
}
```

### Tools Implementation
```typescript
// SEMPRE use esta estrutura para novas tools
export const toolName = tool({
  description: 'Descri√ß√£o clara da funcionalidade',
  parameters: z.object({
    // Par√¢metros com valida√ß√£o Zod
  }),
  execute: async (params) => {
    // Implementa√ß√£o da tool
    return {
      success: boolean,
      message: string,
      data?: any
    };
  },
});
```

### Streaming Pattern
```typescript
// SEMPRE use este padr√£o para streaming
const result = await streamText({
  model: providers[selectedProvider][selectedModel],
  messages,
  tools: {
    createDocument,
    updateDocument,
    getWeather,
    requestSuggestions,
  },
  onFinish: async ({ text, usage }) => {
    await saveChatMessage({ content: text, tokens: usage.totalTokens });
  },
});
```

## üìÑ Sistema de Artifacts

### Tipos Suportados
- `text` - Documentos de texto com Markdown
- `code` - C√≥digo com syntax highlighting e execu√ß√£o
- `image` - Imagens geradas ou editadas pela IA
- `sheet` - Planilhas e dados tabulares

### Padr√£o de Cria√ß√£o
```typescript
// SEMPRE use createDocument tool para artifacts
const document = await db.insert(documents).values({
  title,
  content,
  kind: type, // 'text' | 'code' | 'image' | 'sheet'
  userId: getCurrentUserId(),
}).returning();
```

## üóÑÔ∏è Estrat√©gia de Dados

### SQL (PostgreSQL) - Use para:
- Usu√°rios e autentica√ß√£o
- Metadados de chats e documentos
- Relacionamentos estruturados
- Auditoria e versionamento

### NoSQL (MongoDB) - Use para:
- Conte√∫do flex√≠vel de artifacts
- Configura√ß√µes complexas de usu√°rio
- Logs e analytics vari√°veis
- Cache de sess√£o estruturado

### Decis√£o R√°pida:
- **Estrutura r√≠gida + relacionamentos** ‚Üí SQL
- **Flexibilidade + escalabilidade** ‚Üí NoSQL
- **Ambos os benef√≠cios** ‚Üí Arquitetura h√≠brida

## üé® Padr√µes de UI

### shadcn/ui Components
```bash
# SEMPRE use este comando para instalar componentes
pnpm dlx shadcn@canary add <component>
```

### Estrutura de Componentes
```typescript
// SEMPRE siga esta estrutura para novos componentes
export interface ComponentProps {
  // Props tipadas
}

export function Component({ ...props }: ComponentProps) {
  // Hooks no topo
  // Handlers
  // Render
  return (
    <div className="component-container">
      {/* Conte√∫do */}
    </div>
  );
}
```

### Classes CSS Aprovadas
- Use `cn()` para combinar classes condicionais
- Prefira utility classes do Tailwind
- Use vari√°veis CSS para theming: `hsl(var(--background))`

## üîß Integra√ß√£o Dify

### Configura√ß√£o de Agentes
```typescript
// SEMPRE use esta estrutura para agentes Dify
export interface DifyAgent {
  id: string;
  name: string;
  description: string;
  category: string;
  endpoint: string;
  apiKey: string;
}
```

### Chamada de Agentes
```typescript
// SEMPRE use este padr√£o para chamar agentes Dify
const response = await fetch(`${DIFY_API_BASE}/chat-messages`, {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${DIFY_API_KEY}`,
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    inputs: {},
    query: message,
    response_mode: 'streaming',
    user: getCurrentUserId(),
  }),
});
```

## ‚ö†Ô∏è Regras Importantes

### Do's:
- SEMPRE use streaming para melhor UX
- SEMPRE valide inputs antes de enviar para IA
- SEMPRE implemente error handling gracioso
- SEMPRE documente novas tools e componentes
- SEMPRE use TypeScript com tipagem forte
- SEMPRE teste artifacts antes de deploy

### Don'ts:
- NUNCA exponha API keys no frontend
- NUNCA confie cegamente nas respostas da IA
- NUNCA ignore rate limits dos providers
- NUNCA salve artifacts a cada keystroke
- NUNCA carregue artifacts desnecess√°rios
- NUNCA processe dados sens√≠veis sem valida√ß√£o

## üìö Documenta√ß√£o de Refer√™ncia

Para implementa√ß√µes espec√≠ficas, consulte:
- `docs/arquitetura_geral/FUNDAMENTOS_AI_SDK.md` - Implementa√ß√£o AI SDK
- `docs/arquitetura_geral/CHAT_TEMPLATE_ARTIFACTS.md` - Sistema de artifacts
- `docs/arquitetura_geral/ESTRATEGIA_DADOS_SQL_JSON.md` - Decis√µes de dados
- `docs/arquitetura_geral/GUIA_MODIFICACOES_UI.md` - Modifica√ß√µes de interface
- `docs/arquitetura_geral/PADRAO_INTEGRACAO.md` - Padr√£o de integra√ß√µes

## üéØ Exemplos Pr√°ticos

### Criando Nova Tool
1. Defina interface clara com Zod
2. Implemente l√≥gica de neg√≥cio
3. Adicione error handling
4. Teste com diferentes inputs
5. Documente uso e limita√ß√µes

### Adicionando Novo Tipo de Artifact
1. Crie estrutura em `artifacts/tipo/`
2. Implemente client.tsx e server.ts
3. Adicione ao enum ArtifactType
4. Crie testes espec√≠ficos
5. Atualize documenta√ß√£o

### Integrando Nova API Externa
1. Siga padr√£o em `docs/arquitetura_geral/PADRAO_INTEGRACAO.md`
2. Use checklist em `docs/arquitetura_geral/CHECKLIST_INTEGRACAO.md`
3. Implemente error handling robusto
4. Adicione monitoramento e logs
5. Crie scripts de teste e diagn√≥stico

