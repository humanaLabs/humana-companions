---
description: 
globs: 
alwaysApply: false
---
# Humana Companions - Integra√ß√£o Dify

## üìã Vis√£o Geral
Esta regra define os padr√µes de integra√ß√£o com a plataforma Dify para agentes de IA especializados.

## ü§ñ Estrutura de Agentes Dify

### Configura√ß√£o Base
```typescript
// SEMPRE use esta interface para novos agentes
export interface DifyAgent {
  id: string;                    // Identificador √∫nico
  name: string;                  // Nome amig√°vel
  description: string;           // Descri√ß√£o da funcionalidade
  category: 'general' | 'health' | 'education' | 'business';
  endpoint: string;              // URL da API Dify
  apiKey: string;               // Chave de API (nunca no frontend)
  model: string;                // Modelo IA usado
  temperature: number;          // Criatividade (0-1)
  maxTokens: number;           // Limite de tokens
  systemPrompt: string;        // Prompt de sistema
  isActive: boolean;           // Status do agente
}
```

### Localiza√ß√£o dos Arquivos
```
üìÅ lib/ai/
‚îú‚îÄ‚îÄ dify-agents.ts           # Configura√ß√£o dos agentes
‚îî‚îÄ‚îÄ tools/                   # Tools espec√≠ficas

üìÅ components/
‚îú‚îÄ‚îÄ dify-agent-selector.tsx  # Seletor de agentes
‚îî‚îÄ‚îÄ dify-agent-demo.tsx     # Interface de demonstra√ß√£o

üìÅ app/(chat)/api/
‚îî‚îÄ‚îÄ dify/route.ts           # Endpoint da API
```

## üîß Implementa√ß√£o de Agentes

### Chamada Padr√£o
```typescript
// SEMPRE use este padr√£o para chamar agentes Dify
export async function callDifyAgent(
  agentId: string,
  message: string,
  userId: string,
  conversationId?: string
) {
  const agent = await getDifyAgent(agentId);
  
  const response = await fetch(`${agent.endpoint}/chat-messages`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${agent.apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      inputs: {},
      query: message,
      response_mode: 'streaming',
      conversation_id: conversationId,
      user: userId,
    }),
  });

  if (!response.ok) {
    throw new Error(`Dify API error: ${response.statusText}`);
  }

  return response;
}
```

### Streaming Response
```typescript
// SEMPRE implemente streaming para melhor UX
export async function streamDifyResponse(
  response: Response,
  onChunk: (chunk: string) => void,
  onComplete: (fullResponse: string) => void
) {
  const reader = response.body?.getReader();
  const decoder = new TextDecoder();
  let fullResponse = '';

  while (true) {
    const { done, value } = await reader.read();
    
    if (done) break;
    
    const chunk = decoder.decode(value);
    const lines = chunk.split('\n');
    
    for (const line of lines) {
      if (line.startsWith('data: ')) {
        try {
          const data = JSON.parse(line.slice(6));
          if (data.event === 'message') {
            onChunk(data.answer);
            fullResponse += data.answer;
          }
        } catch (error) {
          console.error('Error parsing Dify response:', error);
        }
      }
    }
  }
  
  onComplete(fullResponse);
}
```

## üéØ Categorias de Agentes

### Agentes de Sa√∫de (health)
```typescript
// Exemplo de agente especializado em sa√∫de
const healthAgent: DifyAgent = {
  id: 'health-advisor',
  name: 'Consultor de Sa√∫de',
  description: 'Especialista em orienta√ß√µes gerais de sa√∫de e bem-estar',
  category: 'health',
  endpoint: process.env.DIFY_HEALTH_ENDPOINT!,
  apiKey: process.env.DIFY_HEALTH_API_KEY!,
  model: 'gpt-4',
  temperature: 0.3, // Baixa criatividade para precis√£o m√©dica
  maxTokens: 2000,
  systemPrompt: `Voc√™ √© um consultor de sa√∫de especializado...`,
  isActive: true,
};
```

### Agentes Educacionais (education)
```typescript
// Exemplo de agente educacional
const educationAgent: DifyAgent = {
  id: 'education-tutor',
  name: 'Tutor Educacional',
  description: 'Assistente para aprendizado e educa√ß√£o',
  category: 'education',
  endpoint: process.env.DIFY_EDUCATION_ENDPOINT!,
  apiKey: process.env.DIFY_EDUCATION_API_KEY!,
  model: 'gpt-4',
  temperature: 0.7, // Criatividade moderada para ensino
  maxTokens: 3000,
  systemPrompt: `Voc√™ √© um tutor educacional...`,
  isActive: true,
};
```

## üîê Seguran√ßa e Configura√ß√£o

### Vari√°veis de Ambiente
```bash
# SEMPRE configure estas vari√°veis
DIFY_API_BASE=https://api.dify.ai/v1
DIFY_DEFAULT_API_KEY=your-default-key
DIFY_HEALTH_ENDPOINT=https://api.dify.ai/v1/workflows/health
DIFY_HEALTH_API_KEY=your-health-key
DIFY_EDUCATION_ENDPOINT=https://api.dify.ai/v1/workflows/education
DIFY_EDUCATION_API_KEY=your-education-key
```

### Valida√ß√£o de Seguran√ßa
```typescript
// SEMPRE valide antes de usar
function validateDifyConfig(agent: DifyAgent): boolean {
  if (!agent.apiKey || agent.apiKey.length < 10) {
    throw new Error('API key inv√°lida');
  }
  
  if (!agent.endpoint || !agent.endpoint.startsWith('https://')) {
    throw new Error('Endpoint deve usar HTTPS');
  }
  
  if (agent.temperature < 0 || agent.temperature > 1) {
    throw new Error('Temperature deve estar entre 0 e 1');
  }
  
  return true;
}
```

## üé® Interface de Usu√°rio

### Seletor de Agentes
```typescript
// Componente para sele√ß√£o de agentes
export function DifyAgentSelector() {
  const [selectedAgent, setSelectedAgent] = useState<string>('');
  const { agents } = useDifyAgents();

  return (
    <Select value={selectedAgent} onValueChange={setSelectedAgent}>
      <SelectTrigger className="w-full">
        <SelectValue placeholder="Selecione um agente especializado" />
      </SelectTrigger>
      <SelectContent>
        {agents.map((agent) => (
          <SelectItem key={agent.id} value={agent.id}>
            <div className="flex items-center space-x-2">
              <Badge variant="outline">{agent.category}</Badge>
              <span>{agent.name}</span>
            </div>
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}
```

### Indicador de Status
```typescript
// SEMPRE mostre status do agente
export function AgentStatusIndicator({ agentId }: { agentId: string }) {
  const { status } = useAgentStatus(agentId);
  
  return (
    <div className="flex items-center space-x-2">
      <div className={`w-2 h-2 rounded-full ${
        status === 'online' ? 'bg-green-500' : 
        status === 'busy' ? 'bg-yellow-500' : 'bg-red-500'
      }`} />
      <span className="text-sm text-muted-foreground">
        {status === 'online' ? 'Dispon√≠vel' : 
         status === 'busy' ? 'Processando' : 'Offline'}
      </span>
    </div>
  );
}
```

## üìä Monitoramento e Logs

### Logging de Intera√ß√µes
```typescript
// SEMPRE registre intera√ß√µes para an√°lise
export async function logDifyInteraction(
  agentId: string,
  userId: string,
  message: string,
  response: string,
  duration: number
) {
  await db.insert(difyLogs).values({
    agentId,
    userId,
    message: message.substring(0, 500), // Limitar tamanho
    response: response.substring(0, 1000),
    duration,
    timestamp: new Date(),
    success: true,
  });
}
```

### M√©tricas de Performance
```typescript
// SEMPRE monitore performance
export function useDifyMetrics(agentId: string) {
  const [metrics, setMetrics] = useState({
    averageResponseTime: 0,
    successRate: 0,
    totalInteractions: 0,
    lastError: null,
  });

  useEffect(() => {
    // Buscar m√©tricas do agente
    fetchAgentMetrics(agentId).then(setMetrics);
  }, [agentId]);

  return metrics;
}
```

## üö® Error Handling

### Tratamento de Erros
```typescript
// SEMPRE implemente error handling robusto
export async function handleDifyError(error: any, agentId: string) {
  console.error(`Dify agent ${agentId} error:`, error);
  
  // Log do erro
  await logDifyError(agentId, error);
  
  // Fallback para agente padr√£o se necess√°rio
  if (error.status === 503) {
    return callFallbackAgent(agentId);
  }
  
  // Mensagem amig√°vel para o usu√°rio
  throw new Error(
    'Desculpe, o agente especializado est√° temporariamente indispon√≠vel. ' +
    'Tente novamente em alguns instantes.'
  );
}
```

### Rate Limiting
```typescript
// SEMPRE implemente rate limiting
export class DifyRateLimiter {
  private requests: Map<string, number[]> = new Map();
  private readonly maxRequests = 60; // por minuto
  private readonly windowMs = 60000; // 1 minuto

  canMakeRequest(userId: string): boolean {
    const now = Date.now();
    const userRequests = this.requests.get(userId) || [];
    
    // Remove requests antigas
    const validRequests = userRequests.filter(
      time => now - time < this.windowMs
    );
    
    if (validRequests.length >= this.maxRequests) {
      return false;
    }
    
    validRequests.push(now);
    this.requests.set(userId, validRequests);
    return true;
  }
}
```

## üß™ Testing

### Testes de Integra√ß√£o
```typescript
// SEMPRE teste integra√ß√£o com Dify
describe('Dify Integration', () => {
  it('should call agent successfully', async () => {
    const mockAgent = createMockDifyAgent();
    const response = await callDifyAgent(
      mockAgent.id,
      'Test message',
      'test-user'
    );
    
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
  });
  
  it('should handle streaming response', async () => {
    const chunks: string[] = [];
    const mockResponse = createMockStreamResponse();
    
    await streamDifyResponse(
      mockResponse,
      (chunk) => chunks.push(chunk),
      (full) => expect(full).toContain('test response')
    );
    
    expect(chunks.length).toBeGreaterThan(0);
  });
});
```

## üìã Checklist de Implementa√ß√£o

Ao adicionar novo agente Dify:

- [ ] Definir interface DifyAgent completa
- [ ] Configurar vari√°veis de ambiente
- [ ] Implementar valida√ß√£o de seguran√ßa
- [ ] Adicionar error handling robusto
- [ ] Implementar streaming response
- [ ] Criar testes de integra√ß√£o
- [ ] Adicionar logging e m√©tricas
- [ ] Documentar funcionalidade espec√≠fica
- [ ] Testar rate limiting
- [ ] Validar performance

## üéØ Exemplos Pr√°ticos

### Novo Agente de Neg√≥cios
```typescript
// 1. Definir o agente
const businessAgent: DifyAgent = {
  id: 'business-consultant',
  name: 'Consultor de Neg√≥cios',
  description: 'Especialista em estrat√©gias empresariais',
  category: 'business',
  endpoint: process.env.DIFY_BUSINESS_ENDPOINT!,
  apiKey: process.env.DIFY_BUSINESS_API_KEY!,
  model: 'gpt-4',
  temperature: 0.5,
  maxTokens: 2500,
  systemPrompt: 'Voc√™ √© um consultor empresarial...',
  isActive: true,
};

// 2. Registrar o agente
export const difyAgents = {
  // ... outros agentes
  'business-consultant': businessAgent,
};

// 3. Usar no componente
function BusinessConsultant() {
  const { callAgent, isLoading } = useDifyAgent('business-consultant');
  
  return (
    <div>
      <h3>Consultor de Neg√≥cios</h3>
      <button onClick={() => callAgent('Como melhorar vendas?')}>
        Consultar
      </button>
    </div>
  );
}
```

## üìö Documenta√ß√£o de Refer√™ncia

Para implementa√ß√µes espec√≠ficas:
- `lib/ai/dify-agents.ts` - Configura√ß√£o dos agentes
- `components/dify-agent-selector.tsx` - Interface de sele√ß√£o
- `app/(chat)/api/dify/route.ts` - Endpoint da API
- `docs/dify/` - Documenta√ß√£o completa (se existir)

