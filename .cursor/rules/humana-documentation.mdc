---
description:
globs:
alwaysApply: false
---
# Humana Companions - Documenta√ß√£o Obrigat√≥ria

## Princ√≠pio Fundamental
**TODO c√≥digo p√∫blico DEVE ser documentado.** Documenta√ß√£o √© parte integral do c√≥digo, n√£o opcional.

## Regras Obrigat√≥rias

### üìù SEMPRE Documente
- Fun√ß√µes e m√©todos p√∫blicos
- Classes e interfaces
- Tipos complexos
- Hooks customizados
- Componentes React
- APIs e endpoints
- Configura√ß√µes importantes

### ‚úÖ Padr√£o JSDoc

#### 1. Fun√ß√µes - Documenta√ß√£o Completa
```typescript
/**
 * Busca agentes Dify dispon√≠veis do servidor
 * 
 * @description Esta fun√ß√£o faz uma requisi√ß√£o para a API de agentes,
 * valida a resposta e retorna uma lista de agentes dispon√≠veis.
 * Em caso de erro, loga o problema e re-throw com contexto adicional.
 * 
 * @returns Promise que resolve para array de agentes
 * @throws {APIError} Quando a API retorna erro HTTP
 * @throws {ValidationError} Quando os dados retornados s√£o inv√°lidos
 * 
 * @example
 * ```typescript
 * try {
 *   const agents = await fetchDifyAgents()
 *   console.log(`Found ${agents.length} agents`)
 * } catch (error) {
 *   console.error('Failed to load agents:', error)
 * }
 * ```
 * 
 * @since 1.0.0
 * @author Humana Team
 */
export async function fetchDifyAgents(): Promise<DifyAgent[]> {
  // implementa√ß√£o...
}
```

#### 2. Interfaces - Documenta√ß√£o Detalhada
```typescript
/**
 * Configura√ß√£o de um agente Dify
 * 
 * @description Interface que define a estrutura de configura√ß√£o
 * para agentes Dify, incluindo credenciais e par√¢metros de execu√ß√£o.
 * 
 * @interface DifyAgentConfig
 * @since 1.0.0
 */
export interface DifyAgentConfig {
  /** Identificador √∫nico do agente (formato: app-uuid) */
  id: string
  
  /** Nome amig√°vel do agente (exibido na UI) */
  name: string
  
  /** 
   * Descri√ß√£o detalhada do agente
   * @example "Especialista em desenvolvimento TypeScript e React"
   */
  description: string
  
  /** 
   * Categoria do agente para agrupamento
   * @default "general"
   */
  category?: string
  
  /** 
   * URL base da API Dify
   * @example "https://api.dify.ai"
   */
  baseUrl: string
  
  /** 
   * Chave de API para autentica√ß√£o
   * @format "app-{uuid}"
   */
  apiKey: string
  
  /** 
   * Timeout em milissegundos para requisi√ß√µes
   * @default 30000
   * @minimum 1000
   * @maximum 120000
   */
  timeout?: number
  
  /** 
   * Se o agente est√° habilitado
   * @default true
   */
  enabled?: boolean
}
```

#### 3. Componentes React - Props e Comportamento
```typescript
/**
 * Seletor de agentes Dify com agrupamento por categoria
 * 
 * @description Componente que renderiza um dropdown para sele√ß√£o
 * de agentes Dify, com agrupamento autom√°tico por categoria,
 * estados de loading e tratamento de erros.
 * 
 * @component
 * @example
 * ```tsx
 * <DifyAgentSelector
 *   agents={agents}
 *   selectedAgent="app-123"
 *   onAgentChange={(id) => setSelectedAgent(id)}
 *   loading={isLoading}
 * />
 * ```
 * 
 * @param props - Propriedades do componente
 * @returns JSX Element
 * 
 * @since 1.0.0
 * @author Humana Team
 */
export function DifyAgentSelector({
  /** Lista de agentes dispon√≠veis */
  agents,
  
  /** ID do agente atualmente selecionado */
  selectedAgent,
  
  /** 
   * Callback executado quando agente √© alterado
   * @param agentId - ID do novo agente selecionado
   */
  onAgentChange,
  
  /** 
   * Estado de carregamento
   * @default false
   */
  loading = false,
  
  /** 
   * Se o seletor est√° desabilitado
   * @default false
   */
  disabled = false
}: DifyAgentSelectorProps) {
  // implementa√ß√£o...
}
```

#### 4. Hooks Customizados - Estado e Efeitos
```typescript
/**
 * Hook para gerenciamento de agentes Dify
 * 
 * @description Hook customizado que gerencia o estado de agentes Dify,
 * incluindo carregamento, sele√ß√£o, e tratamento de erros.
 * Fornece fun√ß√µes para carregar, selecionar e resetar agentes.
 * 
 * @hook
 * @returns Objeto com estado e fun√ß√µes de controle
 * 
 * @example
 * ```typescript
 * function MyComponent() {
 *   const {
 *     agents,
 *     selectedAgent,
 *     loading,
 *     error,
 *     loadAgents,
 *     selectAgent,
 *     resetSelection
 *   } = useDifyAgents()
 * 
 *   useEffect(() => {
 *     loadAgents()
 *   }, [loadAgents])
 * 
 *   return (
 *     <DifyAgentSelector
 *       agents={agents}
 *       selectedAgent={selectedAgent}
 *       onAgentChange={selectAgent}
 *       loading={loading}
 *     />
 *   )
 * }
 * ```
 * 
 * @since 1.0.0
 * @author Humana Team
 */
export function useDifyAgents() {
  // implementa√ß√£o...
  
  return {
    /** Lista de agentes carregados */
    agents,
    
    /** ID do agente atualmente selecionado */
    selectedAgent,
    
    /** Estado de carregamento */
    loading,
    
    /** Mensagem de erro, se houver */
    error,
    
    /** 
     * Carrega lista de agentes do servidor
     * @async
     * @throws {APIError} Em caso de falha na API
     */
    loadAgents,
    
    /** 
     * Seleciona um agente pelo ID
     * @param agentId - ID do agente a ser selecionado
     */
    selectAgent,
    
    /** Limpa a sele√ß√£o atual */
    resetSelection
  }
}
```

#### 5. API Routes - Endpoints e Responses
```typescript
/**
 * GET /api/dify/agents
 * 
 * @description Endpoint para listar agentes Dify dispon√≠veis.
 * Retorna lista de agentes com suas configura√ß√µes b√°sicas.
 * 
 * @route GET /api/dify/agents
 * @access Public
 * 
 * @returns {Promise<NextResponse>} Response com lista de agentes
 * 
 * @example Response Success (200):
 * ```json
 * {
 *   "success": true,
 *   "agents": [
 *     {
 *       "id": "app-123",
 *       "name": "Alex",
 *       "description": "Especialista em desenvolvimento",
 *       "category": "development"
 *     }
 *   ]
 * }
 * ```
 * 
 * @example Response Error (500):
 * ```json
 * {
 *   "success": false,
 *   "error": "Failed to fetch agents from Dify API"
 * }
 * ```
 * 
 * @throws {500} Erro interno do servidor
 * @throws {503} Servi√ßo Dify indispon√≠vel
 * 
 * @since 1.0.0
 * @author Humana Team
 */
export async function GET() {
  // implementa√ß√£o...
}
```

#### 6. Utility Functions - Prop√≥sito e Uso
```typescript
/**
 * Valida se um ID √© um identificador Dify v√°lido
 * 
 * @description Verifica se o ID fornecido segue o padr√£o
 * de identificadores Dify (app-{uuid}). Usado para
 * valida√ß√£o antes de fazer requisi√ß√µes √† API.
 * 
 * @param id - ID a ser validado
 * @returns true se o ID √© v√°lido, false caso contr√°rio
 * 
 * @example
 * ```typescript
 * isValidDifyId('app-123e4567-e89b-12d3-a456-426614174000') // true
 * isValidDifyId('invalid-id') // false
 * isValidDifyId('') // false
 * ```
 * 
 * @since 1.0.0
 * @author Humana Team
 */
export function isValidDifyId(id: string): boolean {
  return /^app-[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/.test(id)
}
```

## Tags JSDoc Obrigat√≥rias

### Para Fun√ß√µes
- `@description` - Descri√ß√£o detalhada
- `@param` - Par√¢metros (nome, tipo, descri√ß√£o)
- `@returns` - Valor de retorno
- `@throws` - Exce√ß√µes que podem ser lan√ßadas
- `@example` - Exemplo de uso
- `@since` - Vers√£o de introdu√ß√£o
- `@author` - Autor/time respons√°vel

### Para Interfaces/Types
- `@description` - Prop√≥sito da interface
- `@interface` ou `@type` - Tipo de defini√ß√£o
- `@since` - Vers√£o de introdu√ß√£o
- Coment√°rios inline para cada propriedade

### Para Componentes
- `@component` - Marca como componente React
- `@description` - Funcionalidade do componente
- `@param` - Props do componente
- `@returns` - JSX Element
- `@example` - Exemplo de uso

### Para Hooks
- `@hook` - Marca como hook customizado
- `@description` - Funcionalidade do hook
- `@returns` - Objeto retornado com descri√ß√£o das propriedades
- `@example` - Exemplo de uso

## Documenta√ß√£o de Configura√ß√£o

### Vari√°veis de Ambiente
```typescript
/**
 * Configura√ß√µes de ambiente para agentes Dify
 * 
 * @description Centraliza todas as configura√ß√µes relacionadas
 * aos agentes Dify, carregadas de vari√°veis de ambiente
 * com fallbacks apropriados.
 */
export const difyConfig = {
  /** 
   * URL base da API Dify
   * @env DIFY_BASE_URL
   * @default "https://api.dify.ai"
   */
  baseUrl: process.env.DIFY_BASE_URL || 'https://api.dify.ai',
  
  /** 
   * Chave de API padr√£o
   * @env DIFY_API_KEY
   * @required
   */
  apiKey: process.env.DIFY_API_KEY || '',
  
  /** 
   * Timeout para requisi√ß√µes em ms
   * @env DIFY_TIMEOUT
   * @default 30000
   * @minimum 1000
   */
  timeout: Number(process.env.DIFY_TIMEOUT) || 30000
}
```

## Checklist de Documenta√ß√£o

### Antes de fazer commit, verificar:
- [ ] Todas as fun√ß√µes p√∫blicas t√™m JSDoc
- [ ] Todas as interfaces t√™m descri√ß√£o
- [ ] Componentes t√™m @example
- [ ] Hooks t√™m exemplo de uso
- [ ] API routes t√™m exemplos de response
- [ ] Configura√ß√µes t√™m @env tags
- [ ] Erros poss√≠veis est√£o documentados
- [ ] @since est√° preenchido
- [ ] @author est√° definido

## Ferramentas de Documenta√ß√£o

### Gera√ß√£o Autom√°tica
```json
// package.json
{
  "scripts": {
    "docs:generate": "typedoc --out docs/api src/",
    "docs:serve": "serve docs/api",
    "docs:validate": "tsc --noEmit && eslint --ext .ts,.tsx src/"
  }
}
```

### Configura√ß√£o TypeDoc
```json
// typedoc.json
{
  "entryPoints": ["src/"],
  "out": "docs/api",
  "theme": "default",
  "includeVersion": true,
  "excludePrivate": true,
  "excludeProtected": true,
  "excludeExternals": true
}
```

## Lembre-se
- Documenta√ß√£o √© para outros desenvolvedores (e voc√™ no futuro)
- Exemplos valem mais que descri√ß√µes longas
- Mantenha documenta√ß√£o atualizada com o c√≥digo
- Use linguagem clara e objetiva
- Documente o "porqu√™", n√£o apenas o "o que"
