---
description:
globs:
alwaysApply: false
---
# Humana Companions - Configura√ß√£o Externa

## Princ√≠pio Fundamental
**NUNCA hardcode valores que podem mudar.** Sempre use arquivos de configura√ß√£o externos.

## Regras Obrigat√≥rias

### üö´ NUNCA Hardcode
- URLs de APIs
- Tokens e chaves de API
- Timeouts e configura√ß√µes de rede
- Par√¢metros de LLM (temperature, max_tokens)
- Configura√ß√µes de UI (temas, idiomas)
- Nomes e configura√ß√µes de agentes
- Feature flags
- Limites e quotas

### ‚úÖ SEMPRE Use Configura√ß√£o Externa
- Vari√°veis de ambiente (.env)
- Arquivos de configura√ß√£o JSON
- Configura√ß√£o centralizada TypeScript
- Valores padr√£o sensatos

## Padr√µes de Implementa√ß√£o

### Estrutura Recomendada
```typescript
// lib/config/index.ts
export const appConfig = {
  api: {
    timeout: Number(process.env.API_TIMEOUT) || 5000,
    maxRetries: Number(process.env.MAX_RETRIES) || 3,
    baseUrl: process.env.API_BASE_URL || 'http://localhost:3000'
  },
  
  dify: {
    baseUrl: process.env.DIFY_BASE_URL || 'https://api.dify.ai',
    apiKey: process.env.DIFY_API_KEY || '',
    timeout: Number(process.env.DIFY_TIMEOUT) || 30000
  },
  
  agents: {
    defaultModel: process.env.DEFAULT_LLM_MODEL || 'gpt-4',
    temperature: Number(process.env.LLM_TEMPERATURE) || 0.7,
    maxTokens: Number(process.env.LLM_MAX_TOKENS) || 2000
  },
  
  ui: {
    theme: process.env.UI_THEME || 'light',
    language: process.env.UI_LANGUAGE || 'pt-BR',
    itemsPerPage: Number(process.env.UI_ITEMS_PER_PAGE) || 10
  },
  
  features: {
    enableArtifacts: process.env.ENABLE_ARTIFACTS !== 'false',
    enableDify: process.env.ENABLE_DIFY !== 'false',
    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true'
  }
}
```

### Uso em Componentes
```typescript
// ‚ùå RUIM - Hardcoded
const Chat = () => {
  const maxMessages = 50; // ‚ùå Hardcoded
  
  const sendMessage = async (text: string) => {
    const response = await fetch('https://api.dify.ai/chat', { // ‚ùå Hardcoded
      headers: {
        'Authorization': 'Bearer sk-1234567890', // ‚ùå Hardcoded
      },
      body: JSON.stringify({
        temperature: 0.7, // ‚ùå Hardcoded
        max_tokens: 2000 // ‚ùå Hardcoded
      })
    });
  };
};

// ‚úÖ BOM - Configura√ß√£o externa
import { appConfig } from '@/lib/config';

const Chat = () => {
  const maxMessages = appConfig.ui.itemsPerPage;
  
  const sendMessage = async (text: string) => {
    const response = await fetch(appConfig.dify.baseUrl + '/chat', {
      headers: {
        'Authorization': `Bearer ${appConfig.dify.apiKey}`,
      },
      body: JSON.stringify({
        temperature: appConfig.agents.temperature,
        max_tokens: appConfig.agents.maxTokens
      })
    });
  };
};
```

### Valida√ß√£o de Configura√ß√£o
```typescript
// Sempre valide configura√ß√µes cr√≠ticas
export function validateConfig() {
  if (!appConfig.dify.apiKey) {
    throw new Error('DIFY_API_KEY √© obrigat√≥rio');
  }
  
  if (appConfig.agents.temperature < 0 || appConfig.agents.temperature > 2) {
    throw new Error('LLM_TEMPERATURE deve estar entre 0 e 2');
  }
}
```

## Checklist de Implementa√ß√£o

Quando criar ou modificar c√≥digo, sempre verificar:
- [ ] N√£o h√° valores hardcoded
- [ ] Configura√ß√µes est√£o em vari√°veis de ambiente
- [ ] Valores padr√£o est√£o definidos
- [ ] Configura√ß√£o est√° documentada
- [ ] Valida√ß√£o est√° implementada quando necess√°rio

## Arquivos de Configura√ß√£o

### .env.local (exemplo)
```bash
# APIs
API_TIMEOUT=5000
API_MAX_RETRIES=3
API_BASE_URL=http://localhost:3000

# Dify
DIFY_BASE_URL=https://api.dify.ai
DIFY_API_KEY=app-your-key-here
DIFY_TIMEOUT=30000

# LLM
DEFAULT_LLM_MODEL=gpt-4
LLM_TEMPERATURE=0.7
LLM_MAX_TOKENS=2000

# UI
UI_THEME=light
UI_LANGUAGE=pt-BR
UI_ITEMS_PER_PAGE=10

# Features
ENABLE_ARTIFACTS=true
ENABLE_DIFY=true
ENABLE_ANALYTICS=false
```

## Estrutura de Pastas
```
lib/config/
‚îú‚îÄ‚îÄ index.ts              # Configura√ß√£o principal
‚îú‚îÄ‚îÄ validation.ts         # Valida√ß√£o de configura√ß√£o
‚îú‚îÄ‚îÄ environment.ts        # Configura√ß√£o por ambiente
‚îî‚îÄ‚îÄ types.ts             # Tipos TypeScript

config/
‚îú‚îÄ‚îÄ agents.json          # Configura√ß√£o dos agentes
‚îú‚îÄ‚îÄ features.json        # Feature flags
‚îî‚îÄ‚îÄ ui-themes.json       # Temas da interface
```

## Lembre-se
- Configura√ß√£o externa = flexibilidade
- Hardcode = rigidez e problemas
- Sempre documente configura√ß√µes
- Sempre defina valores padr√£o
- Sempre valide configura√ß√µes cr√≠ticas
