# Humana Companions - Intelligent Context Rules

## üéØ Context-Aware Rule Loading

**The AI should automatically load specific context rules based on the file being edited:**

### Frontend Development
**When working with UI/Frontend files** (components/, *.tsx, *.css, tailwind.*, ui-related):
- Load the comprehensive frontend guidelines from `.cursorrules-frontend`
- Apply design system rules, component patterns, and UI/UX best practices
- Focus on responsive design, accessibility, and React patterns

### Backend Development  
**When working with API/Backend files** (app/api/, lib/db/, lib/auth/, *.sql, drizzle.*, middleware.ts):
- Load the comprehensive backend guidelines from `.cursorrules-backend`
- Apply database patterns, API design, authentication, and server-side best practices
- Focus on security, multi-tenancy, and performance

### AI/LLM Development
**When working with AI files** (lib/ai/, *ai.ts, *tool.ts, *mcp.ts):
- Load the comprehensive AI guidelines from `.cursorrules-ai`
- Apply AI SDK patterns, prompt engineering, and provider management
- Focus on LLM integrations, streaming, and context management

### Documentation
**When working with documentation** (projeto/, *.md, docs/, README, blueprint):
- Load the comprehensive documentation guidelines from `.cursorrules-docs`
- Apply blueprint structure, markdown formatting, and writing standards
- Focus on strategic documentation without technical implementation details

### Core/Configuration
**When working with core files** (package.json, tsconfig.*, next.config.*, .env, scripts/):
- Load the comprehensive core guidelines from `.cursorrules-core`
- Apply fundamental technologies, project structure, and best practices
- Focus on Next.js 15, TypeScript, performance, and conventions

## üîß Core Technologies (Always Active)

- **Framework**: Next.js 15 App Router with TypeScript strict mode
- **Styling**: Tailwind CSS v4 with design system tokens
- **Database**: Drizzle ORM with PostgreSQL and multi-tenancy
- **AI**: Vercel AI SDK with multiple providers (OpenAI, Anthropic, Azure)
- **Authentication**: NextAuth.js v5 with RBAC permissions

## üé® Design System (Always Active)

**NEVER use hardcoded colors. ALWAYS use design system classes:**

**‚úÖ CORRECT:**
- Cards: `bg-card border rounded-lg`
- Text: `text-foreground` / `text-muted-foreground`  
- Backgrounds: `bg-muted` / `bg-muted/50`
- Buttons: `bg-primary hover:bg-primary/90 text-primary-foreground`

**‚ùå NEVER use:**
- `bg-white dark:bg-gray-800`
- `text-gray-900 dark:text-white`
- Direct color values like `bg-blue-600`

## üîó Terminology Standards

- Use "Companion" instead of "Chat"
- "Companion Super Hero" instead of "Default Chat"
- "Organization" for organizational structures
- "Data Room" for document management
- "MCP Server" for tool servers
- Maintain consistency across all implementations

## üí° Context Loading Instructions

**For maximum effectiveness, the AI should:**

1. **Automatically detect** the file type being edited
2. **Load the corresponding context** from the appropriate `.cursorrules-*` file
3. **Apply the specific guidelines** for that development area
4. **Maintain awareness** of these core rules throughout the session

This creates an intelligent, context-aware development experience that adapts to your current task while maintaining project consistency. 